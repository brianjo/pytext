SquadQATask.Config
==================



**Component:** :class:`SquadQATask  <pytext.task.tasks.SquadQATask>`\ 


.. py:currentmodule:: pytext.task.tasks
.. py:class:: SquadQATask.Config
  :noindex:

  **Bases:** :class:`NewTask.Config <pytext.task.new_task.NewTask.Config>`\ 

  

**All Attributes (including base classes)**

  **data**: :doc:`Data.Config <pytext.data.data.Data.Config>` = :doc:`Data.Config <pytext.data.data.Data.Config>`\ ()
    \ 

  **trainer**: :doc:`TaskTrainer.Config <pytext.trainers.trainer.TaskTrainer.Config>` = :doc:`TaskTrainer.Config <pytext.trainers.trainer.TaskTrainer.Config>`\ ()
    \ 

  **model**: Union[:doc:`BertSquadQAModel.Config <pytext.models.qna.bert_squad_qa.BertSquadQAModel.Config>`, :doc:`DrQAModel.Config <pytext.models.qna.dr_qa.DrQAModel.Config>`] = :doc:`DrQAModel.Config <pytext.models.qna.dr_qa.DrQAModel.Config>`\ ()
    \ 

  **metric_reporter**: :doc:`SquadMetricReporter.Config <pytext.metric_reporters.squad_metric_reporter.SquadMetricReporter.Config>` = :doc:`SquadMetricReporter.Config <pytext.metric_reporters.squad_metric_reporter.SquadMetricReporter.Config>`\ ()
    \ 



**Default JSON**


.. code-block:: json


  {
      "data": {
          "Data": {
              "source": {
                  "TSVDataSource": {
                      "column_mapping": {},
                      "train_filename": null,
                      "test_filename": null,
                      "eval_filename": null,
                      "field_names": null,
                      "delimiter": "\t",
                      "quoted": false,
                      "drop_incomplete_rows": false
                  }
              },
              "batcher": {
                  "PoolingBatcher": {
                      "train_batch_size": 16,
                      "eval_batch_size": 16,
                      "test_batch_size": 16,
                      "pool_num_batches": 10000,
                      "num_shuffled_pools": 1
                  }
              },
              "sort_key": null,
              "in_memory": true
          }
      },
      "trainer": {
          "TaskTrainer": {
              "epochs": 10,
              "early_stop_after": 0,
              "max_clip_norm": null,
              "report_train_metrics": true,
              "target_time_limit_seconds": null,
              "do_eval": true,
              "load_best_model_after_train": true,
              "num_samples_to_log_progress": 1000,
              "num_accumulated_batches": 1,
              "num_batches_per_epoch": null,
              "optimizer": {
                  "Adam": {
                      "lr": 0.001,
                      "weight_decay": 1e-05,
                      "eps": 1e-08
                  }
              },
              "scheduler": null,
              "sparsifier": null,
              "fp16_args": {
                  "FP16OptimizerFairseq": {
                      "init_loss_scale": 128,
                      "scale_window": null,
                      "scale_tolerance": 0.0,
                      "threshold_loss_scale": null,
                      "min_loss_scale": 0.0001
                  }
              }
          }
      },
      "model": {
          "DrQAModel": {
              "inputs": {
                  "squad_input": {
                      "SquadTensorizer": {
                          "is_input": true,
                          "column": "text",
                          "tokenizer": {
                              "Tokenizer": {
                                  "split_regex": "\\W+",
                                  "lowercase": true
                              }
                          },
                          "add_bos_token": false,
                          "add_eos_token": false,
                          "use_eos_token_for_bos": false,
                          "max_seq_len": null,
                          "vocab": {
                              "build_from_data": true,
                              "size_from_data": 0,
                              "vocab_files": []
                          },
                          "vocab_file_delimiter": " ",
                          "doc_column": "doc",
                          "ques_column": "question",
                          "answers_column": "answers",
                          "answer_starts_column": "answer_starts",
                          "max_ques_seq_len": 64,
                          "max_doc_seq_len": 256
                      }
                  },
                  "has_answer": {
                      "LabelTensorizer": {
                          "is_input": false,
                          "column": "has_answer",
                          "allow_unknown": false,
                          "pad_in_vocab": false,
                          "label_vocab": null
                      }
                  }
              },
              "dropout": 0.4,
              "embedding": {
                  "load_path": null,
                  "save_path": null,
                  "freeze": false,
                  "shared_module_key": null,
                  "embed_dim": 300,
                  "embedding_init_strategy": "random",
                  "embedding_init_range": null,
                  "export_input_names": [
                      "tokens_vals"
                  ],
                  "pretrained_embeddings_path": "/mnt/vol/pytext/users/kushall/pretrained/glove.840B.300d.txt",
                  "vocab_file": "",
                  "vocab_size": 0,
                  "vocab_from_train_data": true,
                  "vocab_from_all_data": false,
                  "vocab_from_pretrained_embeddings": true,
                  "lowercase_tokens": true,
                  "min_freq": 1,
                  "mlp_layer_dims": [],
                  "padding_idx": null,
                  "cpu_only": false,
                  "skip_header": true,
                  "delimiter": " "
              },
              "ques_rnn": {
                  "load_path": null,
                  "save_path": null,
                  "freeze": false,
                  "shared_module_key": null,
                  "hidden_size": 32,
                  "num_layers": 1,
                  "dropout": 0.4,
                  "bidirectional": true,
                  "rnn_type": "lstm",
                  "concat_layers": true
              },
              "doc_rnn": {
                  "load_path": null,
                  "save_path": null,
                  "freeze": false,
                  "shared_module_key": null,
                  "hidden_size": 32,
                  "num_layers": 1,
                  "dropout": 0.4,
                  "bidirectional": true,
                  "rnn_type": "lstm",
                  "concat_layers": true
              },
              "output_layer": {
                  "load_path": null,
                  "save_path": null,
                  "freeze": false,
                  "shared_module_key": null,
                  "loss": {
                      "CrossEntropyLoss": {}
                  },
                  "ignore_impossible": true,
                  "pos_loss_weight": 0.5,
                  "has_answer_loss_weight": 0.5,
                  "false_label": "False",
                  "max_answer_len": 30,
                  "hard_weight": 0.0
              },
              "is_kd": false
          }
      },
      "metric_reporter": {
          "output_path": "/tmp/test_out.txt",
          "pep_format": false,
          "n_best_size": 5,
          "max_answer_length": 16,
          "ignore_impossible": true,
          "false_label": "False"
      }
  }