RoBERTaEncoderJit.Config
========================



**Component:** :class:`RoBERTaEncoderJit  <pytext.models.roberta.RoBERTaEncoderJit>`\ 


.. py:currentmodule:: pytext.models.roberta
.. py:class:: RoBERTaEncoderJit.Config
  :noindex:

  **Bases:** :class:`RoBERTaEncoderBase.Config <pytext.models.roberta.RoBERTaEncoderBase.Config>`\ 

  

**All Attributes (including base classes)**

  **load_path**: Optional[str] = ``None``
    \ 

  **save_path**: Optional[str] = ``None``
    \ 

  **freeze**: bool = ``False``
    \ 

  **shared_module_key**: Optional[str] = ``None``
    \ 

  **output_dropout**: float = ``0.4``
    \ 

  **embedding_dim**: int = ``768``
    \ 

  **pooling**: PoolingMethod = ``<PoolingMethod.CLS_TOKEN: 'cls_token'>``
    \ 

  **export**: bool = ``False``
    \ 

  **pretrained_encoder**: :doc:`Module.Config <pytext.models.module.Module.Config>` = :doc:`Module.Config <pytext.models.module.Module.Config>`\ (load_path=\ ``'manifold://pytext_training/tree/static/models/roberta_public.pt1'``\ )
    \ 



**Default JSON**


.. code-block:: json


  {
      "load_path": null,
      "save_path": null,
      "freeze": false,
      "shared_module_key": null,
      "output_dropout": 0.4,
      "embedding_dim": 768,
      "pooling": "cls_token",
      "export": false,
      "pretrained_encoder": {
          "load_path": "manifold://pytext_training/tree/static/models/roberta_public.pt1",
          "save_path": null,
          "freeze": false,
          "shared_module_key": null
      }
  }