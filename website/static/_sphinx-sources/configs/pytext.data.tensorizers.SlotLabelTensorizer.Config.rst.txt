SlotLabelTensorizer.Config
==========================



**Component:** :class:`SlotLabelTensorizer  <pytext.data.tensorizers.SlotLabelTensorizer>`\ 


.. py:currentmodule:: pytext.data.tensorizers
.. py:class:: SlotLabelTensorizer.Config
  :noindex:

  **Bases:** :class:`Tensorizer.Config <pytext.data.tensorizers.Tensorizer.Config>`\ 

  

**All Attributes (including base classes)**

  **is_input**: bool = ``False``
    \ 

  **slot_column**: str = ``'slots'``
    The name of the slot label column to parse from the data source.
    

  **text_column**: str = ``'text'``
    The name of the text column to parse from the data source.
    We need this to be able to generate tensors which correspond to input text.
    

  **tokenizer**: :doc:`Tokenizer.Config <pytext.data.tokenizers.tokenizer.Tokenizer.Config>` = :doc:`Tokenizer.Config <pytext.data.tokenizers.tokenizer.Tokenizer.Config>`\ ()
    The tokenizer to use to split input text into tokens. This should be
    configured in a way which yields tokens consistent with the tokens input to
    or output by a model, so that the labels generated by this tensorizer
    will match the indices of the model's tokens.
    

  **allow_unknown**: bool = ``False``
    Whether to allow for unknown labels at test/prediction time
    



**Subclasses**
  - :class:`SlotLabelTensorizerExpansible.Config <pytext.data.tensorizers.SlotLabelTensorizerExpansible.Config>`\ 


**Default JSON**


.. code-block:: json


  {
      "is_input": false,
      "slot_column": "slots",
      "text_column": "text",
      "tokenizer": {
          "Tokenizer": {
              "split_regex": "\\s+",
              "lowercase": true
          }
      },
      "allow_unknown": false
  }